// ignore_for_file: unused_local_variable

import 'dart:async';
import 'package:syncfusion_flutter_datagrid/datagrid.dart';
import 'package:syncfusion_flutter_datagrid_export/export.dart';
import 'package:syncfusion_flutter_pdf/pdf.dart';
import 'package:syncfusion_flutter_xlsio/xlsio.dart' hide Column, Row;
import 'package:path_provider/path_provider.dart' as path_provider;
// import 'package:syncfusion_flutter_datagrid_export/export.dart';
// Local import
import 'helper/save_file_mobile.dart'
    if (dart.library.html) 'helper/save_file_web.dart' as helper;
import 'package:flutter/material.dart';

void main() {
  runApp(MaterialApp(home: MyApp()));
}

final int _rowsPerPage = 15;
final double _dataPagerHeight = 60.0;
List<Employee> _orders = [];
List<Employee> _paginatedOrders = [];
List<Employee> _employees = <Employee>[];
late EmployeeDataSource _employeeDataSource;

final GlobalKey<SfDataGridState> _key = GlobalKey<SfDataGridState>();

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  @override
  void initState() {
    super.initState();
    _employees = _getEmployeeData();
    _employeeDataSource = EmployeeDataSource(employeeData: _employees);
  }

  Future<void> _exportDataGridToExcel() async {
    final workbook = _key.currentState!.exportToExcelWorkbook();

    final List<int> bytes = workbook.saveAsStream();
    workbook.dispose();

    await helper.saveAndLaunchFile(bytes, 'DataGrid.xlsx');
  }

  Future<void> _exportDataGridToPdf() async {
    final PdfDocument document =
        _key.currentState!.exportToPdfDocument(fitAllColumnsInOnePage: true);

    final List<int> bytes = document.saveSync();
    await helper.saveAndLaunchFile(bytes, 'DataGrid.pdf');
    document.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(builder: (context, constraint) {
      return Column(children: [
        SizedBox(
            height: constraint.maxHeight - _dataPagerHeight,
            width: constraint.maxWidth,
            child: _buildDataGrid(constraint)),
        Container(
            height: _dataPagerHeight,
            child: SfDataPager(
              delegate: _employeeDataSource,
              pageCount: _employees.length / _rowsPerPage,
              direction: Axis.horizontal,
            ))
      ]);
    });
  }

  Widget _buildDataGrid(BoxConstraints constraint) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'Syncfusion Flutter DataGrid Export',
          overflow: TextOverflow.ellipsis,
        ),
      ),
      body: Column(
        children: <Widget>[
          Container(
            margin: const EdgeInsets.all(12.0),
            child: Row(
              children: <Widget>[
                SizedBox(
                  height: 40.0,
                  width: 150.0,
                  child: MaterialButton(
                      color: Colors.blue,
                      onPressed: _exportDataGridToExcel,
                      child: const Center(
                          child: Text(
                        'Export to Excel',
                        style: TextStyle(color: Colors.white),
                      ))),
                ),
                const Padding(padding: EdgeInsets.all(20)),
                SizedBox(
                  height: 40.0,
                  width: 150.0,
                  child: MaterialButton(
                      color: Colors.blue,
                      onPressed: _exportDataGridToPdf,
                      child: const Center(
                          child: Text(
                        'Export to PDF',
                        style: TextStyle(color: Colors.white),
                      ))),
                ),
              ],
            ),
          ),
          Expanded(
            child: SfDataGrid(
              key: _key,
              source: _employeeDataSource,
              allowSorting: true,
              columnWidthMode: ColumnWidthMode.fill,
              allowFiltering: true,
              columns: <GridColumn>[
                GridColumn(
                    columnName: 'ID',
                    label: Container(
                        padding: const EdgeInsets.all(16.0),
                        alignment: Alignment.centerRight,
                        child: const Text(
                          'ID',
                        ))),
                GridColumn(
                    columnName: 'Name',
                    label: Container(
                        padding: const EdgeInsets.all(8.0),
                        alignment: Alignment.centerRight,
                        child: const Text('Name'))),
                GridColumn(
                    columnName: 'Designation',
                    label: Container(
                        padding: const EdgeInsets.all(8.0),
                        alignment: Alignment.centerRight,
                        child: const Text(
                          'Designation',
                          overflow: TextOverflow.ellipsis,
                        ))),
                GridColumn(
                    columnName: 'Salary',
                    label: Container(
                        padding: const EdgeInsets.all(8.0),
                        alignment: Alignment.centerRight,
                        child: const Text(
                          'Salary',
                          overflow: TextOverflow.ellipsis,
                        ))),
              ],
            ),
          ),
        ],
      ),
    );
  }

  List<Employee> _getEmployeeData() {
    return <Employee>[
      Employee(10001, 'James', 'Project Lead', 20000),
      Employee(10002, 'Kathryn', 'Manager', 30000),
      Employee(10003, 'Lara', 'Developer', 15000),
      Employee(10004, 'Michael', 'Designer', 15000),
      Employee(10005, 'Martin', 'Developer', 15000),
      Employee(10006, 'Newberry', 'Developer', 15000),
      Employee(10007, 'Balnc', 'Developer', 15000),
      Employee(10008, 'Perry', 'Developer', 15000),
      Employee(10009, 'Gable', 'Developer', 15000),
      Employee(10010, 'Grimes', 'Developer', 15000),
      Employee(10011, 'James', 'Project Lead', 20000),
      Employee(10012, 'Kathryn', 'Manager', 30000),
      Employee(10013, 'Lara', 'Developer', 15000),
      Employee(10014, 'Michael', 'Designer', 15000),
      Employee(10015, 'Martin', 'Developer', 15000),
      Employee(10016, 'Newberry', 'Developer', 15000),
      Employee(10017, 'Balnc', 'Developer', 15000),
      Employee(10018, 'Perry', 'Developer', 15000),
      Employee(10019, 'Gable', 'Developer', 15000),
      Employee(10020, 'Grimes', 'Developer', 15000),
      Employee(10021, 'James', 'Project Lead', 20000),
      Employee(10022, 'Kathryn', 'Manager', 30000),
      Employee(10023, 'Lara', 'Developer', 15000),
      Employee(10024, 'Michael', 'Designer', 15000),
      Employee(10025, 'Martin', 'Developer', 15000),
      Employee(10026, 'Newberry', 'Developer', 15000),
      Employee(10027, 'Balnc', 'Developer', 15000),
      Employee(10028, 'Perry', 'Developer', 15000),
      Employee(10029, 'Gable', 'Developer', 15000),
      Employee(10030, 'Grimes', 'Developer', 15000)
    ];
  }
}

class Employee {
  Employee(this.ID, this.Name, this.Designation, this.Salary);

  final int ID;

  final String Name;

  final String Designation;

  final int Salary;
}

class EmployeeDataSource extends DataGridSource {
  EmployeeDataSource({required List<Employee> employeeData}) {
    _employeeData = employeeData
        .map<DataGridRow>((Employee e) => DataGridRow(cells: <DataGridCell>[
              DataGridCell<int>(columnName: 'ID', value: e.ID),
              DataGridCell<String>(columnName: 'Name', value: e.Name),
              DataGridCell<String>(
                  columnName: 'Designation', value: e.Designation),
              DataGridCell<int>(columnName: 'Salary', value: e.Salary),
            ]))
        .toList();
    buildPaginatedDataGridRows();
  }
  // ignore: non_constant_identifier_names
  // EmployeeDataSource() {
  //   _employeeData =
  //       _employeeData.getRange(0, _rowsPerPage).toList(growable: false);
  //   buildPaginatedDataGridRows(_employeeData);
  // }

  List<DataGridRow> _employeeData = [];

  @override
  List<DataGridRow> get rows => _employeeData;

  // @override
  // DataGridRowAdapter buildRow(DataGridRow row) {
  //   return DataGridRowAdapter(
  //       cells: row.getCells().map<Widget>((DataGridCell cell) {
  //     return Container(
  //       alignment: Alignment.center,
  //       padding: const EdgeInsets.all(8.0),
  //       child: Text(cell.value.toString()),
  //     );
  //   }).toList());
  // }
  DataGridRowAdapter? buildRow(DataGridRow row) {
    return DataGridRowAdapter(
        cells: row.getCells().map<Widget>((dataGridCell) {
      if (dataGridCell.columnName == 'ID') {
        return Container(
          padding: EdgeInsets.symmetric(horizontal: 16.0),
          alignment: Alignment.centerRight,
          child: Text(
            dataGridCell.value.toString(),
            overflow: TextOverflow.ellipsis,
          ),
        );
      } else if (dataGridCell.columnName == 'Name') {
        return Container(
            padding: EdgeInsets.symmetric(horizontal: 16.0),
            alignment: Alignment.centerRight,
            child: Text(
              dataGridCell.value.toString(),
              overflow: TextOverflow.ellipsis,
            ));
      } else if (dataGridCell.columnName == 'Designation') {
        return Container(
            padding: EdgeInsets.symmetric(horizontal: 16.0),
            alignment: Alignment.centerRight,
            child: Text(
              dataGridCell.value,
              overflow: TextOverflow.ellipsis,
            ));
      } else {
        return Container(
            padding: EdgeInsets.symmetric(horizontal: 16.0),
            alignment: Alignment.centerRight,
            child: Text(
              dataGridCell.value.toString(),
              overflow: TextOverflow.ellipsis,
            ));
      }
    }).toList());
  }

  // int _rowsPerPage = 10;
  @override
  Future<bool> handlePageChange(int oldPageIndex, int newPageIndex) async {
    int startIndex = newPageIndex * _rowsPerPage;
    int endIndex = startIndex + _rowsPerPage;
    if (startIndex < _employeeData.length && endIndex <= _employeeData.length) {
      _employeeData =
          _employeeData.getRange(startIndex, endIndex).toList(growable: false);
      buildPaginatedDataGridRows();
      notifyListeners();
    } else {
      _employeeData = [];
    }

    return true;
  }

  void buildPaginatedDataGridRows() {
    // List<Employee> employeeData;
    var dataGridRows = _employeeData.map<DataGridRow>((dataGridRow) {
      return DataGridRow(cells: [
        DataGridCell(columnName: 'ID', value: dataGridRow),
        DataGridCell(columnName: 'Name', value: dataGridRow),
        DataGridCell(columnName: 'Designation', value: dataGridRow),
        DataGridCell(columnName: 'Salary', value: dataGridRow),
      ]);
    }).toList(growable: false);
  }
}
